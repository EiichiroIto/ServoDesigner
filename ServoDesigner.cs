'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 23 August 2016 at 4:30:29 pm'!"Change Set:		ServoDesignerDate:			21 August 2016Author:			Eiichiro Ito"!WatcherMorph subclass: #ChannelMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ServoDesigner'!Morph subclass: #ServoEditCanvas	instanceVariableNames: 'originalData data numChannels sync sendBroadcast '	classVariableNames: ''	poolDictionaries: ''	category: 'ServoDesigner'!ServoEditCanvas class	instanceVariableNames: ''!DialogBoxMorph subclass: #ServoEditFrame	instanceVariableNames: 'scratchFrame canvasMorph servoMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'ServoDesigner'!ServoEditFrame class	instanceVariableNames: ''!ScratchSpriteMorph subclass: #ServoSpriteMorph	instanceVariableNames: ''	classVariableNames: 'NumChannels '	poolDictionaries: ''	category: 'ServoDesigner'!ServoSpriteMorph class	instanceVariableNames: ''!!ChannelMorph methodsFor: 'event handling'!click: evt 	| s newValue |	s _ StringDialog ask: 'Enter Value (0 - 255)' initialAnswer: self getValue printString.	s isEmpty ifTrue: [^ self].	[newValue := s asNumber max: 0]		ifError: [^ DialogBoxMorph inform: 'Please enter a number' localized].	self setValue: newValue! !!ChannelMorph methodsFor: 'event handling' stamp: 'EiichiroIto 8/11/2016 21:55'!doubleClick: evt	scratchSlider ifNotNil: [^ self showLargeReadout]. "slider -> large readout"	isLarge ifTrue: [^ self showSmallReadout].  "large readout -> small readout"	self showSlider  "small readout -> slider"! !!ChannelMorph methodsFor: 'event handling' stamp: 'EiichiroIto 8/17/2016 20:34'!startDrag: evt	^ self! !!ChannelMorph methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 20:54'!getValue	^ self target getVar: self getVariable! !!ChannelMorph methodsFor: 'private'!setValue: aNumber	| newValue |	newValue := aNumber max: sliderMin.	newValue := newValue min: sliderMax.	self target setVar: self getVariable to: newValue! !!DialogBoxMorph methodsFor: 'geometry'!extent: aPoint		| w |	(self isKindOf: PaintFrame) ifTrue: [^ super extent: aPoint].	(self isKindOf: ServoEditFrame) ifTrue: [^ super extent: aPoint].	self fixLayoutForExtent: aPoint.	super extent: self fullBounds extent.	w _ self world.	w ifNotNil: [self position: w center - (self extent // 2)].  "center on screen"! !!ObjStream class methodsFor: 'class initialization'!userClasses	"Answer an array of (<class id>, <class name>) records for all version numbered user classes."	"The following finds obsolete user classes:"	"self initialize. self userClasses reject: [:rec | Smalltalk includesKey: rec second]"	^ #(		"id		class"		(100		Morph)		(101		BorderedMorph)		(102		RectangleMorph)		(103		EllipseMorph)		(104		AlignmentMorph)		(105		StringMorph)		(106		UpdatingStringMorph)		(107		SimpleSliderMorph)		(108		SimpleButtonMorph)		(109		SampledSound)		(110		ImageMorph)		(111		SketchMorph)		"(120	SpriteMorph)"		"(121		SoundMorph)"		"(122	ImageBoxMorph)"		(123		SensorBoardMorph)		(124		ScratchSpriteMorph)		(125		ScratchStageMorph)		(126		ServoSpriteMorph)		(140		ChoiceArgMorph)		(141		ColorArgMorph)		(142		ExpressionArgMorph)		"(143	ParameterReferenceMorph)"		"(144	PositionArgMorph)"		(145		SpriteArgMorph)		"(146	VariableArgMorph)"		(147		BlockMorph)		(148		CommandBlockMorph)		(149		CBlockMorph)		"(150	MethodCallBlockMorph)"		(151		HatBlockMorph)		"(152	ScratchButtonMorph)"		(153		ScratchScriptsMorph)		(154		ScratchSliderMorph)		(155		WatcherMorph)		"(156	ParameterMorph)"		(157		SetterBlockMorph)		(158		EventHatMorph)		"(159	EventArgMorph)"		(160		VariableBlockMorph)		"(161		IACTHatBlock)"		(162		ImageMedia)		(163		MovieMedia)		(164		SoundMedia)		(165		KeyEventHatMorph)		(166		BooleanArgMorph)		(167		EventTitleMorph)		(168		MouseClickEventHatMorph)		(169		ExpressionArgMorphWithMenu)		(170		ReporterBlockMorph)		(171		MultilineStringMorph)		(172		ToggleButton)		(173		WatcherReadoutFrameMorph)		(174		WatcherSliderMorph)		(175		ScratchListMorph)		(176		ScrollingStringMorph)	)! !!ScratchFrameMorph methodsFor: 'intialization'!createMenuPanel	"Create and add a panel containing the menus and close button."	| menuSpecs m |	"create panel"	menuPanel _ AlignmentMorph new		color: Color transparent;		centering: #center;		inset: 0;		height: 0.	"will grow as needed"	self addShortcutButtonsTo: menuPanel.	"menuSpecs defines the menus"	menuSpecs _ #(		"name			selector"		(File			fileMenu:)		(Edit			editMenu:)		(Share			shareMenu:)		(Help			helpMenu:)	).	menuSpecs do: [:spec |		m _ ScratchMenuTitleMorph new			contents: (spec at: 1) localized;			target: self selector: (spec at: 2).		menuPanel addMorphBack: m.		#helpMenu: = (spec at: 2) ifFalse: [			menuPanel addMorphBack: (Morph new color: Color transparent; extent: 12@5)]].	topPane addMorph: menuPanel.! !!ScratchFrameMorph methodsFor: 'menu/button actions'!addServerCommandsTo: menu	"Add Scratch server commands to the given menu."	| disable endCmd |	disable _ false.  "make this true to disable this feature"	disable ifTrue: [^ self].	menu addLine.	(workPane scratchServer notNil and:	 [workPane scratchServer sessionInProgress])		ifTrue: [			menu add: 'Show IP Address' action: #showNetworkAddress.			endCmd _ workPane scratchServer isHosting				ifTrue: ['Stop Hosting Mesh']				ifFalse: ['Leave Mesh'].			menu add: endCmd action: #exitScratchSession]		ifFalse: [			menu add: 'Host Mesh' action: #startHostingScratchSession.			menu add: 'Join Mesh' action: #joinScratchSession].! !!ScratchFrameMorph methodsFor: 'menu/button actions'!processSettingsFile	"Process settings from the Scratch.ini file."	| lang settings k |	self class setVisibleDrives: nil.	lang _ nil.	ScratchFileChooserDialog clearFolderCache. "clear homeDir and last folder cache"	settings _ self readSettingsFile.	settings associationsDo: [:assoc |		k _ assoc key.		k = 'language' ifTrue: [lang _ assoc value].		k = 'home' ifTrue: [ScratchFileChooserDialog setHomeDir: assoc value].		k = 'visibledrives' ifTrue: [self class setVisibleDrives: assoc value].		k = 'servochannels' ifTrue: [ServoSpriteMorph numChannels: assoc value]].	lang ifNil: [lang _ ScratchTranslator guessLanguage].	self setLanguage: lang.! !!ScratchFrameMorph methodsFor: 'menu/button actions'!shareMenu: aMenuTitleMorph 	| menu |	menu _ CustomMenu new.	self addServerCommandsTo: menu.	menu localize.	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'other'!closeMediaEditorsAndDialogs	"Close any open paint or sound editors, asking the user first to avoid losing edits. Answer true if all are closed."	| mList mHasCancel |	mList _ PaintFrame allInstances select: [:m | m isInWorld].	mList _ mList, ServoEditFrame allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close paint editor?') ifFalse: [^ false].		mList do: [:m | m cancelled; delete].		paintingInProgress _ false].	mList _ ScratchSoundRecorderDialogMorph allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close sound recorder?') ifFalse: [^ false].		mList do: [:m | m cancelled; delete]].	mList _ DialogBoxMorph allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false].		mList do: [:m |			mHasCancel _ false.			m buttons do: [:b |				b action = #cancelled ifTrue: [mHasCancel _ true]].			mHasCancel				ifTrue: [m cancelled; delete]				ifFalse: [m no; delete]]].	DialogBoxMorph subclassesDo: [:c |		mList _ c allInstances select: [:m | m isInWorld].		mList size > 0 ifTrue: [			(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false].			mList do: [:m |				mHasCancel _ false.				m buttons do: [:b |					b action = #cancelled ifTrue: [mHasCancel _ true]].				mHasCancel					ifTrue: [m cancelled; delete]					ifFalse: [m no; delete]]]].	"subclass of a subclass of DialogBoxMorph"	mList _ NewVariableDialog allInstances select: [:m | m isInWorld].	mList size > 0 ifTrue: [		(DialogBoxMorph ask: 'Close dialog?') ifFalse: [^ false].		mList do: [:m | m cancelled; delete]].	^ true! !!ScriptableScratchMorph methodsFor: 'blocks'!defaultArgsFor: blockSpec	"Answer the default argument for the given block specification."	| defaultArgs stage sel currentSize list |	defaultArgs _ blockSpec copyFrom: 4 to: blockSpec size.  "may be empty"	stage _ self ownerThatIsA: ScratchStageMorph.	sel _ (blockSpec at: 3) asSymbol.	#gotoX:y: = sel ifTrue: [		defaultArgs _ Array			with: self referencePosition x rounded			with: self referencePosition y rounded].	#glideSecs:toX:y:elapsed:from: = sel ifTrue: [		defaultArgs _ Array			with: 1			with: self referencePosition x rounded			with: self referencePosition y rounded].	#motor:direction: = self ifTrue: [		defaultArgs _ Array with: 'reverse' localized with: 'this way' localized with: 'that way'].	#setSizeTo: = sel ifTrue: [		currentSize _ (100.0 * (self scalePoint x max: self scalePoint y)) rounded.		defaultArgs _ Array with: currentSize].	#getAttribute:of: = sel ifTrue: [		(stage _ self ownerThatIsA: ScratchStageMorph) ifNotNil: [			list _ stage submorphs select: [:m | m isKindOf: ScratchSpriteMorph].			list sort: [:s1 :s2 | s1 objName asLowercase < s2 objName asLowercase].			list size > 0				ifTrue: [defaultArgs _ Array with: 'x position' with: list first]				ifFalse: [defaultArgs _ Array with: 'background #' with: stage]]		ifNil:[defaultArgs _ Array with: 'x position' with: self]].	#concatenate:with: = sel ifTrue: [		defaultArgs _ Array with: 'hello ' localized with: 'world' localized].	#doAsk = sel ifTrue: [		defaultArgs _ Array with: 'What''s your name?' localized].	#letter:of: = sel ifTrue: [		defaultArgs _ Array with: 1 with: 'world' localized].	#stringLength: = sel ifTrue: [		defaultArgs _ Array with: 'world' localized].	#say:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized with: 2].	#say: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized].	#think:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized with: 2].	#think: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized].	(#(lookLike: showBackground:) includes: sel) ifTrue: [		defaultArgs _ Array with: self costumeNames last].	(#(playSound: doPlaySoundAndWait) includes: sel) ifTrue: [		list _ self soundNames.		defaultArgs _ list size <= 2			ifTrue: [Array with: '']			ifFalse: [Array with: (list at: (list size - 2))]].	(#(broadcast: doBroadcastAndWait) includes: sel) ifTrue: [		stage ifNotNil: [defaultArgs _ Array with: stage defaultEventName]].	(#(append:toList: deleteLine:ofList: insert:at:ofList:) includes: sel) ifTrue: [		defaultArgs size >= 1 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized]].	(#(append:toList: deleteLine:ofList: getLine:ofList: insert:at:ofList: lineCountOfList:)		includes: sel) ifTrue: [			defaultArgs _ defaultArgs copyWith: self defaultListName].	#setLine:ofList:to: = sel ifTrue: [		defaultArgs size >= 3 ifTrue: [			defaultArgs at: 2 put: self defaultListName.			defaultArgs at: 3 put: (defaultArgs at: 3) localized]].	#appendLettersOf:toList: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: self defaultListName]].	#list:contains: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: self defaultListName.			defaultArgs at: 2 put: (defaultArgs at: 2) localized]].	#lookLike:inSecs:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: self costumeNames last with: 2].	#nextCostumeInSecs:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 2].	^ defaultArgs! !!ScratchStageMorph methodsFor: 'event handling'!createNewServoSprite	| frame morph |	(frame _ self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self].	morph _ ServoSpriteMorph new.	frame addAndView: morph.	morph addChannelVariables! !!ScratchStageMorph methodsFor: 'menus'!rightButtonMenu	"Present the right button menu."	| menu |	menu _ CustomMenu new.	menu add: 'grab screen region for new sprite' action: #grabSpriteFromScreen.	menu addLine.	menu add: 'save picture of stage...' action: #stageShot.	menu addLine.	menu add: 'create new Servo sprite' action: #createNewServoSprite.	menu localize; invokeOn: self.! !!ServoEditCanvas methodsFor: 'entry point'!numChannels: anInteger	numChannels := anInteger.	self buildCanvas! !!ServoEditCanvas methodsFor: 'initialization'!initialize	super initialize.	self color: Color veryVeryLightGray.	sync := false.	sendBroadcast := false! !!ServoEditCanvas methodsFor: 'private'!buildCanvas	| base pos next |	pos _ self topLeft.	base _ self createButtons.	base position: pos.	self addMorph: base.	next _ 1.	1 to: (numChannels / 10 roundUpTo: 1)		do: 			[:each | 			pos _ pos + (base width + 10 @ 0).			base _ self createChannelsFrom: next to: (next + 9 min: numChannels).			base position: pos.			self addMorph: base.			next _ next + 10]! !!ServoEditCanvas methodsFor: 'private'!createButtons	| base morph |	base _ AlignmentMorph newColumn color: Color transparent;			 inset: 2;			 vResizing: #shrinkWrap.	morph _ ScratchFrameMorph buttonLabel: 'Send servo changed' localized selector: #sendBroadcast.	morph target: owner servoMorph.	base addMorphBack: morph.	base addMorphBack: (AlignmentMorph newSpacer: Color transparent).	morph _ self createToggleButtonFor: 'Always send' localized.	base addMorphBack: morph.	base addMorphBack: (AlignmentMorph newSpacer: Color transparent).	morph _ ScratchFrameMorph buttonLabel: 'Set all to 0' localized selector: #setMin.	morph target: self.	base addMorphBack: morph.	base addMorphBack: (AlignmentMorph newSpacer: Color transparent).	morph _ ScratchFrameMorph buttonLabel: 'Set all to 128' localized selector: #setHalf.	morph target: self.	base addMorphBack: morph.	base addMorphBack: (AlignmentMorph newSpacer: Color transparent).	morph _ ScratchFrameMorph buttonLabel: 'Set all to 255' localized selector: #setMax.	morph target: self.	base addMorphBack: morph.	base addMorphBack: (AlignmentMorph newSpacer: Color transparent).	morph _ ScratchFrameMorph buttonLabel: 'Set all to #' localized selector: #setNumber.	morph target: self.	base addMorphBack: morph.	^ base! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 21:22'!createChannelsFrom: fromValue to: toValue	| base |	base _ AlignmentMorph newColumn color: Color transparent;			 inset: 2;			 vResizing: #shrinkWrap.	fromValue to: toValue do: [:each | base addMorphBack: (self createWatcherMorph: each)].	^ base! !!ServoEditCanvas methodsFor: 'private'!createToggleButtonFor: aString 	| base morph |	base _ AlignmentMorph newRow color: Color transparent;			 vResizing: #shrinkWrap.	morph _ ToggleButton onForm: (ScratchFrameMorph skinAt: #watcherButtonPressed)				offForm: (ScratchFrameMorph skinAt: #watcherButton).	morph target: self;	 actionSelector: #toggleSync:;	 arguments: (Array with: morph).	base addMorphBack: morph.	morph := StringMorph contents: aString.	base addMorphBack: morph.	^ base! !!ServoEditCanvas methodsFor: 'private'!createWatcherMorph: anInteger 	| watcher |	watcher _ ChannelMorph new.	watcher		target: self		selector: #getVar:		parameter: 'ch' , anInteger asString.	watcher sliderRange: (Array with: self sliderMin with: self sliderMax).	watcher layoutStyle: #small.	watcher updateTargetName.	watcher setCategoryColor: Color brown.	watcher showSlider.	^ watcher! !!ServoEditCanvas methodsFor: 'private'!setAllTo: anInteger 	1 to: numChannels do: [:each | self			setVar: 'ch' , each asString			to: anInteger			withBroadcast: false].	sync ifTrue: [sendBroadcast := true]! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 20:01'!setHalf	self setAllTo: 128! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 20:01'!setMax	self setAllTo: 255! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 20:01'!setMin	self setAllTo: 0! !!ServoEditCanvas methodsFor: 'private'!setNumber	| s newValue |	s _ StringDialog ask: 'Enter Value (0 - 255)' initialAnswer: ''.	s isEmpty ifTrue: [^ self].	[newValue _ s asNumber max: 0]		ifError: [^ DialogBoxMorph inform: 'Please enter a number' localized].	newValue := newValue max: self sliderMin.	newValue := newValue min: self sliderMax.	self setAllTo: newValue! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 21:02'!sliderMax	^ 255! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/17/2016 21:02'!sliderMin	^ 0! !!ServoEditCanvas methodsFor: 'private' stamp: 'EiichiroIto 8/16/2016 19:26'!stageMorph	| stage |	stage _ owner servoMorph ownerThatIsA: ScratchStageMorph.	stage ifNil: [self error: 'cannot find ScratchStageMorph'].	^ stage! !!ServoEditCanvas methodsFor: 'private'!toggleSync: aMorph	sync := aMorph isOn! !!ServoEditCanvas methodsFor: 'accessing'!blockSpecForSelector: aSymbol 	^ nil! !!ServoEditCanvas methodsFor: 'accessing'!getVar: aSymbol 	^ self stageMorph getVar: aSymbol! !!ServoEditCanvas methodsFor: 'accessing'!objName	^ owner objName! !!ServoEditCanvas methodsFor: 'accessing'!setVar: aSymbol to: anInteger 	self setVar: aSymbol to: anInteger withBroadcast: sync! !!ServoEditCanvas methodsFor: 'accessing'!setVar: aSymbol to: anInteger withBroadcast: aBoolean 	| oldValue |	oldValue _ self stageMorph getVar: aSymbol.	anInteger ~= oldValue		ifTrue: 			[self stageMorph setVar: aSymbol to: anInteger.			aBoolean ifTrue: [sendBroadcast _ true]]! !!ServoEditCanvas methodsFor: 'stepping'!step	| server |	sendBroadcast		ifTrue: 			[sendBroadcast _ false.			owner servoMorph sendBroadcast].	server _ self stageMorph scratchServer.	server ifNotNil: [server stepServer]! !!ServoEditCanvas methodsFor: 'stepping'!stepTime	^ 300! !!ServoEditCanvas class methodsFor: 'accessing'!canvasExtent	^ 440 @ 330! !!ServoEditFrame methodsFor: 'entry point'!scratchFrame: aScratchFrameMorph 	scratchFrame _ aScratchFrameMorph! !!ServoEditFrame methodsFor: 'entry point'!servoMorph: aMorph	servoMorph := aMorph.	canvasMorph numChannels: ServoSpriteMorph numChannels! !!ServoEditFrame methodsFor: 'interaction'!cancelled	self exitPaintEditor.	super cancelled! !!ServoEditFrame methodsFor: 'interaction'!yes	servoMorph ifNil: [^ self cancelled].	servoMorph channelVariablesToCostume.	self exitPaintEditor.	super yes! !!ServoEditFrame methodsFor: 'geometry'!extent: aPoint 	super extent: aPoint.	self fixLayout! !!ServoEditFrame methodsFor: 'geometry'!fixLayout	canvasMorph ifNotNil: [canvasMorph position: self left + 10 @ (self top + 42)].	buttonRow ifNotNil: [buttonRow position: self right - buttonRow width - 30 @ (self bottom - buttonRow height - 22)].	titleBin ifNotNil: [titleBin left: self left + (self width - titleBin width // 2) - 5]! !!ServoEditFrame methodsFor: 'initialization'!initialize	super initialize.	canvasMorph _ ServoEditCanvas new extent: ServoEditCanvas canvasExtent.	self addMorph: canvasMorph.	buttonRow		ifNotNil: 			[buttonRow delete.			self addMorph: buttonRow]! !!ServoEditFrame methodsFor: 'accessing'!objName	^ servoMorph objName! !!ServoEditFrame methodsFor: 'accessing' stamp: 'EiichiroIto 8/16/2016 19:25'!servoMorph	^ servoMorph! !!ServoEditFrame methodsFor: 'other'!exitPaintEditor	scratchFrame ifNotNil: [scratchFrame paintingInProgress: false].	World ifNotNil: [World activeHand turnOffGridding; showTemporaryCursor: nil]! !!ServoEditFrame class methodsFor: 'instance creation'!new	^ super new		withButtonsForYes: false		no: false		okay: true		cancel: true;	 title: 'Servo Editor';	 extent: self frameExtent! !!ServoEditFrame class methodsFor: 'accessing'!frameExtent	^ 480 @ 440! !!ServoSpriteMorph methodsFor: 'accessing'!addChannelVariables	| sFrame workPane |	sFrame _ self ownerThatIsA: ScratchFrameMorph.	sFrame ifNil: [^ self].	workPane _ sFrame workPane.	1 to: self class numChannels do: 		[:each | 		| ch | 		ch _ 'ch' , each asString.		(workPane variableNameInUse: ch)			ifFalse: [workPane addVariable: ch]]! !!ServoSpriteMorph methodsFor: 'accessing'!channelVariablesToCostume	| form |	form _ self formOfChannelVariables.	form ifNil: [^ self].	self costume form: form! !!ServoSpriteMorph methodsFor: 'accessing'!costumeToChannelVariables	| list |	list _ self channelListOfCostume: self costume.	self setChannelVariablesFromList: list! !!ServoSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 8/20/2016 19:30'!channelListOfCostume: aCostume	| data list |	list _ Array new: self class numChannels.	1 to: self class numChannels do: 		[:each | 		data _ (aCostume form colorAt: each @ 0) b255.		list at: each put: data].	^ list! !!ServoSpriteMorph methodsFor: 'private'!costumePath: fileName 	| costumeFolder |	costumeFolder _ ScratchFileChooserDialog getDefaultFolderForType: #costume.	^ costumeFolder pathName , FileDirectory slash , fileName! !!ServoSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 8/19/2016 21:15'!formOfChannelVariables	| orgForm form c data stageMorph ch |	stageMorph _ self ownerThatIsA: ScratchStageMorph.	stageMorph ifNil: [^ nil].	orgForm _ self costume form.	form _ Form extent: orgForm extent depth: 32.	orgForm		displayOn: form		at: 0 @ 0		rule: Form paint.	1 to: self class numChannels do: 		[:each | 		ch _ 'ch' , each asString.		data _ stageMorph getVar: ch.		c _ Color					r: 255					g: 255					b: data					range: 255.		form colorAt: each @ 0 put: c].	^ form! !!ServoSpriteMorph methodsFor: 'private'!sendBroadcast	self broadcast: 'servo changed'! !!ServoSpriteMorph methodsFor: 'private' stamp: 'EiichiroIto 8/20/2016 19:32'!setChannelVariablesFromList: anArray	| ch stageMorph |	stageMorph _ self ownerThatIsA: ScratchStageMorph.	stageMorph ifNil: [^ self].	anArray		withIndexDo: 			[:each :index | 			ch _ 'ch' , index asString.			stageMorph setVar: ch to: each].	self sendBroadcast! !!ServoSpriteMorph methodsFor: 'initialization'!initialize	super initialize.	self importMedia: (self costumePath: 'servo.png')! !!ServoSpriteMorph methodsFor: 'right button menu'!editDrawing	| sFrame paintEditor |	(sFrame _ self ownerThatIsA: ScratchFrameMorph)		ifNotNil: 			[sFrame paintingInProgress ifTrue: [^ self].			sFrame stopAll.			sFrame paintingInProgress: true].	paintEditor _ ServoEditFrame new.	paintEditor scratchFrame: sFrame;	 servoMorph: self.	(paintEditor isKindOf: DialogBoxMorph)		ifTrue: [paintEditor getUserResponse]		ifFalse: 			[World addMorphFront: paintEditor.			World startSteppingSubmorphsOf: paintEditor]! !!ServoSpriteMorph methodsFor: 'looks ops' stamp: 'EiichiroIto 8/17/2016 16:56'!lookLike: costumeNameOrIndex	super lookLike: costumeNameOrIndex.	self costumeToChannelVariables! !!ServoSpriteMorph methodsFor: 'looks ops'!lookLike: costumeNameOrIndex inSecs: duration elapsed: elapsed from: startList 	| fraction endList newList |	startList ifNil: [^ self channelListOfCostume: self costume].	duration < 0.001		ifTrue: [fraction _ 1]		ifFalse: [fraction _ elapsed asFloat / (1000.0 * duration)].	fraction > 1.0 ifTrue: [fraction _ 1].	fraction < 0.0 ifTrue: [fraction _ 0].	fraction = 1 ifTrue: [^ self lookLike: costumeNameOrIndex].	endList _ self channelListOfCostume: (self costumeFromName: costumeNameOrIndex).	newList _ startList withIndexCollect: [:each :index | each + (fraction * ((endList at: index)							- each)) truncated].	self setChannelVariablesFromList: newList! !!ServoSpriteMorph methodsFor: 'looks ops'!nextCostumeInSecs: duration elapsed: elapsed from: startList 	| fraction endList newList name |	startList ifNil: [^ self channelListOfCostume: self costume].	duration < 0.001		ifTrue: [fraction _ 1]		ifFalse: [fraction _ elapsed asFloat / (1000.0 * duration)].	fraction > 1.0 ifTrue: [fraction _ 1].	fraction < 0.0 ifTrue: [fraction _ 0].	fraction = 1 ifTrue: [^ self nextCostume].	name _ self costumeNameFromNumber: self costumeIndex + 1.	endList _ self channelListOfCostume: (self costumeFromName: name).	newList _ startList withIndexCollect: [:each :index | each + (fraction * ((endList at: index)							- each)) truncated].	self setChannelVariablesFromList: newList! !!ServoSpriteMorph methodsFor: 'media'!addServoCostume	| newName newImage newForm |	newForm _ self formOfChannelVariables.	newForm ifNil: [^ self].	newImage _ ImageMedia new form: newForm.	newName _ self unusedMediaNameFromBaseName: 'servo'.	newImage mediaName: newName.	media addLast: newImage.	self lookLike: newImage mediaName.	self updateMediaCategory! !!ServoSpriteMorph methodsFor: 'blocks' stamp: 'EiichiroIto 8/19/2016 20:58'!costumesPage: xOffset	"Answer a morph containing thumbnails of my costumes."	| bin label m y images n newBut maxHeight xMargin yMargin separator |	xMargin _ 15.	yMargin _ 15.	bin _ ScratchBlockPaletteMorph new color: ScratchFrameMorph scriptsPaneColor.	label _ 'New costume:' localized.	m _ StringMorph		contents: label		font: (ScratchFrameMorph getFont: #CostumesPage).	m color: Color white.	bin addMorph: m.	newBut _ ScratchFrameMorph buttonLabel: 'Add' localized selector: #addServoCostume.	newBut target: self.	bin addMorph: newBut.	maxHeight _ (m height max: (newBut height)).	ScratchTranslator isRTL		ifTrue: [			newBut position: xMargin@(yMargin + ((maxHeight - newBut height) / 2)).			m position: (newBut right + 4)@(yMargin + ((maxHeight - m height) / 2))]		ifFalse: [			m position: xMargin@(yMargin + ((maxHeight - m height) / 2)).			newBut position: (m right + 4)@(yMargin + ((maxHeight - newBut height) / 2))].	separator _ TiledImageMorph new tileForm: (ScratchFrameMorph skinAt: #costumeSeparatorTile).	bin addMorph: (separator position: (xOffset + 17)@(yMargin + maxHeight + 5)).	y _ yMargin + maxHeight + 9.	n _ 0.	images _ media select: [:item | item isImage].	images do: [:item |		m _ MediaItemMorph new.		m scratchObj: self media: item; position: xOffset@y.		m setNumber: (n _ n + 1).		item = costume ifTrue: [m highlight: true].		bin addMorph: m.		y _ y + m height - 1.].	bin submorphs size > 0		ifTrue: [separator width: bin firstSubmorph width - 14]		ifFalse: [separator width: 240].	^ bin! !!ServoSpriteMorph class methodsFor: 'accessing' stamp: 'EiichiroIto 8/18/2016 06:52'!defaultNumChannels	^ 20! !!ServoSpriteMorph class methodsFor: 'accessing' stamp: 'EiichiroIto 8/18/2016 06:52'!numChannels	NumChannels ifNil: [NumChannels := self defaultNumChannels].	^ NumChannels! !!ServoSpriteMorph class methodsFor: 'accessing'!numChannels: anInteger 	NumChannels _ anInteger asNumberNoError max: 1.	NumChannels _ NumChannels min: 30! !!ServoSpriteMorph class methodsFor: 'block specs'!blockSpecs	| blocks |	blocks _ #(		'looks'			('switch to costume %l in %n secs'	t	lookLike:inSecs:elapsed:from: )			('next costume in %n secs'			t	nextCostumeInSecs:elapsed:from: )	).	^ blocks, super blockSpecs! !"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."ObjStream initialize.!